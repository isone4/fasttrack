<?php

declare(strict_types=1);

namespace App\Command;

use App\CodeRepositoryProviders\CodeRepository;
use App\CodeRepositoryProviders\FetchCriteria;
use App\CodeRepositoryProviders\Provider;
use App\Entity\CodeRepo;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class FetchRepositoryCommand extends Command
{
    public function __construct(private Provider $provider, private EntityManagerInterface $entityManager)
    {
        parent::__construct();
    }

    protected static $defaultName = 'app:fetch-repository';

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $orgname = $input->getArgument('organizationName');
        $provider = $input->getArgument('providerName');

        $output->writeln($input->getArgument('organizationName'));
        $output->writeln($input->getArgument('providerName'));

        /**
         * @var CodeRepository[] $codeRepositories
         */
        $codeRepositories = $this->provider->fetch(new FetchCriteria($orgname, $provider));

        foreach ($codeRepositories as $repository) {
            $trust = $repository->contributionsNumber + ($repository->openIssuesNumber * 1.2) + ($repository->stargazers * 2);

            $codeRepo = new CodeRepo(
                (string) $repository->externalId,
                $repository->orgname,
                $repository->reponame,
                $repository->url,
                $repository->provider,
                $repository->creationdate,
                $repository->stargazers,
                $repository->openIssuesNumber,
                $repository->contributionsNumber,
                $trust
            );
            $this->entityManager->persist($codeRepo);
        }

        $this->entityManager->flush();

        return Command::SUCCESS;
    }

    protected function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this->addArgument('organizationName', InputArgument::REQUIRED, 'the organization name');
        $this->addArgument('providerName', InputArgument::REQUIRED, 'provider name');
    }
}